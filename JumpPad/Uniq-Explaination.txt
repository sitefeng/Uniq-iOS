
//Created by Si Te Feng on December 11, 2013
//All rights reserved

//Version 1.0 created on July 20, 2014 at 5:55am


//to use pre-ARC: -fno-objc-arc
//to get a build for all architectures
 lipo -create ./Debug-iphoneos/libCorePlot-CocoaTouch.a ./Debug-iphonesimulator/libCorePlot-CocoaTouch.a -output core_plot_all.a

//Showing execption message when breakpoint is hit:
If your target is the iOS simulator, or 32-bit OS X, you can print the exception by typing po ((id*)$esp)[1] in the debug console when your breakpoint exception is hit. If your target is an iOS device, you can type po $r0. And if your target is 64-bit OS X, you can type po $rdi.

//Specify root path in Xcode build settings: $(SRCROOT)
//Project Path: $(PROJECT_DIR)

/////////////
markers:
//JPDeprecated
//todo
//todo urgent
//todo nonurgent
//temp

/////////////



New School Format
Max Number of Schools: 213

XXX-XX-XXXXX
214-74-83647 LONG_MAX


//
What is iPadDashletView?

Dashlets are the square views that shows information about a college, faculty, or program. They are interactive and can be tappable



What is Item Extended Chart?

After tapping on a Dashlet from the Featured tab or the Exlore tab, the user will be presented with a new Modal View Controller with a brand new sets of tabs, in oder to view more spcific details
-> It can be a Program Extended Chart or College Extended Chart




iPadBannerView

The image below the Navigation Bar


//Caching the most recent 30 Items in local storage



//Saving Bandwidth
- Create NSMutableDictionary in the Table View Controller class,
- Allow the cells to load images individually, after loading finished, Store the images in the dictionary with a delegate method
- When reloading a cell, directly assign the stored image to the cell.
- Empty the dictionary when memory warning is received.


You could try putting your images into an NSMutableDictionary. In the place where you build your cell, check if the image you want is already stored. If it is, use that copy, if not load it from wherever you're getting the images from originally and place it in the dictionary. I think I used an NSMutableDictionary with the image identifier as the key and the image as the value to do this and it sped up the table scrolling.

You might want to unload the NSMutableDictionary if you get a memory warning.

Your problem may just be that you're loading images over the network, which makes scrolling jerky. Check here for a solution to that.

http://stackoverflow.com/questions/932859/preloading-images-from-url-in-tableviewcell/



//Local Notifications code

UIApplication *app = [UIApplication sharedApplication];
        // Remove all prior notifications
        NSArray *scheduled = [app scheduledLocalNotifications]; 
        if (scheduled.count)
            [app cancelAllLocalNotifications];
        // Create a new notification
    UILocalNotification* alarm =[[UILocalNotification alloc] init];
    if (alarm)
        {
            alarm.fireDate = [NSDate dateWithTimeIntervalSinceNow:3.0f]; alarm.timeZone = [NSTimeZone defaultTimeZone];
            alarm.repeatInterval = 0;
            alarm.alertBody = @"Five Seconds Have Passed"; [app scheduleLocalNotification:alarm];
            // Force quit. Never do this in App Store code.
            exit(0);
        }

//twitter pass: bethechange




